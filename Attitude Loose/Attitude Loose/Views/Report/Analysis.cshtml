@model Attitude_Loose.ViewModels.ReportAnalysisViewModel

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.1/Chart.min.js"></script>
<h1>Analysis</h1><br><br>

@Styles.Render("~/Content/CSS")
@Scripts.Render("~/Scripts/HomeLayout")


@Html.EnumDropDownListFor(m => m.ReportList, // Model field that will be used to store user selection
                              "- Select a analysis -", // Text for the first 'default' option
                              new { @id = "analysislist" })


@using (Html.BeginForm("Analysis", "Report", FormMethod.Post))
{
    <div id="reportdatecard" class="card col-md-12">
        <br>
        @Html.ValidationSummary()
        <div style="float:left;" class="col-md-12">
            <div class="row">
                <div class=" col-md-6">
                    @Html.LabelFor(x => x.StartDate, new { @class = "col-md-4 form-control-label" })
                </div>
                <div class=" col-md-6">
                    @Html.TextBoxFor(x => x.StartDate, new { @class = "ui-datepicker", @style = "display:block;float:left;" })
                </div>
            </div>
            <div class="row">
                <div class=" col-md-6">
                    @Html.LabelFor(x => x.EndDate, new { @class = "col-md-4 form-control-label" })
                </div>
                <div class=" col-md-6">
                    @Html.TextBoxFor(x => x.EndDate, new { @class = "ui-datepicker", @style = "display:block;float:left;" })
                </div>
            </div>
        </div>
        <br>
    </div>
    <br>
    <div class="row">
        <div class=" col-md-4">
        </div>
        <div class=" col-md-4">
            <input type="submit" id="btnChart" class="col-md-4 form-control-label" value="Submit" />
        </div>
        <div class=" col-md-4">
        </div>
    </div>
    @Html.HiddenFor(m => m.SelectedAnalysis)
}

<div id="chartcard" class="col-md-12">
    <canvas class="my-4" id="numberChart" width="900" height="380"></canvas>
    <canvas class="my-4" id="timeChart" width="900" height="380"></canvas>
</div>
<script>
        var ctxNumber = document.getElementById("numberChart");
        var ctxTime = document.getElementById("timeChart");
        var numberconfig = {
            type: 'line',
            data: {

                labels: [@Model.Xaxis],

                datasets: []
            },
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: 'Work Number Report'
                },
                tooltips: {
                    mode: 'index',
                    intersect: false,
                },
                hover: {
                    mode: 'nearest',
                    intersect: true
                },
                scales: {
                    xAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'Date'
                        }
                    }],
                    yAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'Value'
                        }
                    }]
                }
            }
        };

        var timeconfig = {
            type: 'line',
            data: {

                labels: [@Model.Xaxis],

                datasets: []
            },
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: 'Work Time Report'
                },
                tooltips: {
                    mode: 'index',
                    intersect: false,
                },
                hover: {
                    mode: 'nearest',
                    intersect: true
                },
                scales: {
                    xAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'Date'
                        }
                    }],
                    yAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'Work Time'
                        }
                    }]
                }
            }
        };


                @for (var index = 0; index < Model.Loginname.Count(); index++) {
                var loginname = Model.Loginname.GetValue(index);
                var nYaxis = Model.nYaxis[loginname.ToString()];
                @:var newDataset = { data: [], fill: false };
                @:newDataset.data.push(@nYaxis);
                @:newDataset.label = '@loginname';
                @:newDataset.borderColor = "rgba(" + (Math.random() * 255).toString() + ", " + (Math.random() * 255).toString() + ", " + (Math.random() * 255).toString() + ", " + "0.5)";
                @:newDataset.backgroundColor = "rgba(" + (Math.random() * 255).toString() + ", " + (Math.random() * 255).toString() + ", " + (Math.random() * 255).toString() + ", " + "0.5)";
                @:numberconfig.data.datasets.push(newDataset);
            }

                @for (var index = 0; index < Model.Loginname.Count(); index++) {
                var loginname = Model.Loginname.GetValue(index);
                var tYaxis = Model.tYaxis[loginname.ToString()];
                @:var newDataset = { data: [], fill: false };
                @:newDataset.data.push(@tYaxis);
                @:newDataset.label = '@loginname';
                @:newDataset.borderColor = "rgba(" + (Math.random() * 255).toString() + ", " + (Math.random() * 255).toString() + ", " + (Math.random() * 255).toString() + ", " + "0.5)";
                @:newDataset.backgroundColor = "rgba(" + (Math.random() * 255).toString() + ", " + (Math.random() * 255).toString() + ", " + (Math.random() * 255).toString() + ", " + "0.5)";
                @:timeconfig.data.datasets.push(newDataset);
            }

        var numberChart = new Chart(ctxNumber, numberconfig);
        var timeChart = new Chart(ctxTime, timeconfig);


        $(document).ready(function () {
        $('.ui-datepicker').each(function (i, v) {
            $(".ui - datepicker").val(" ");
            //$(v).val($.datepicker.formatDate('dd-M-yy', new Date($(v).val())))
            $(v).datepicker({
                dateFormat: 'yy-mm-dd',
                changeYear: true,
                changeMonth: true,
                yearRange: '2000:2025',
                buttonImage: '@Url.Content("~/Images/calendar.gif")',
                buttonImageOnly: true,
                showOn: "button"
            });
        });
    });


        $(function () {
        var reportdatecard = $("#reportdatecard");
            $("#analysislist").selectmenu({
            create: function (event, data) {
            $("#SelectedAnalysis").val(null);
        },

            change: function (event, data) {
                $("#SelectedAnalysis").val(data.item.value);
            }
        });
    });

     $(function () {
         var chartcard = $("#chartcard");
         var a = @Model.AnalysisResult.CompareTo(false);
         if (@Model.AnalysisResult.CompareTo(false)== 0) {
             chartcard.addClass("invisible");
         }
         else {
             chartcard.removeClass("invisible");
         }
        });
</script>
