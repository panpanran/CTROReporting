@model Attitude_Loose.ViewModels.ReportAnalysisViewModel

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.1/Chart.min.js"></script>
<h1>Analysis</h1><br><br>

@Styles.Render("~/Content/CSS")
@Scripts.Render("~/Scripts/HomeLayout")


@Html.EnumDropDownListFor(m => m.ReportList, // Model field that will be used to store user selection
                              "- Select a analysis -", // Text for the first 'default' option
                              new { @id = "analysislist" })


@using (Html.BeginForm("Analysis", "Report", FormMethod.Post))
{
    <div id="reportdatecard" class="card col-md-12">
        <br>
        @Html.ValidationSummary()
        <div style="float:left;" class="col-md-12">
            <div class="row">
                <div class=" col-md-6">
                    @Html.LabelFor(x => x.StartDate, new { @class = "col-md-4 form-control-label" })
                </div>
                <div class=" col-md-6">
                    @Html.TextBoxFor(x => x.StartDate, new { @class = "ui-datepicker", @style = "display:block;float:left;" })
                </div>
            </div>
            <div class="row">
                <div class=" col-md-6">
                    @Html.LabelFor(x => x.EndDate, new { @class = "col-md-4 form-control-label" })
                </div>
                <div class=" col-md-6">
                    @Html.TextBoxFor(x => x.EndDate, new { @class = "ui-datepicker", @style = "display:block;float:left;" })
                </div>
            </div>
        </div>
        <br>
    </div>
    <br>
    <div class="row">
        <div class=" col-md-4">
        </div>
        <div class=" col-md-4">
            <input type="submit" id="btnChart" class="col-md-6 form-control-label" value="Submit" />
        </div>
        <div class=" col-md-4">
        </div>
    </div>
    @Html.HiddenFor(m => m.SelectedAnalysis)
}

<br><br>

<div id="charttabs">
    <ul></ul>
</div>

<script>

    $(function () {
        var tabs = $("#charttabs").tabs();
        var tabTitle = 'panpanr',
            tabContent = '',
            tabTemplate = "<li><a href='#{href}'>#{label}</a></li>",
            tabCounter = 0;

        @for (var ind = 0; ind < Model.Xaxis.Count(); ind = ind + 1) {
            var Xaxis = Model.Xaxis[ind];
            var ChartName = Model.ChartName[ind];
            var ChartType = Model.ChartType[ind];

            //dynamic tabs
      @:      var label = '@ChartName',
      @:          id = "tabs-" +  @ind.ToString(),
      @:          li = $(tabTemplate.replace(/#\{href\}/g, "#" + id).replace(/#\{label\}/g, label)),
      @:          tabContentHtml = tabContent;

      @:      tabs.find(".ui-tabs-nav").append(li);
      @:      tabs.append("<div id='" + id + "'>" + tabContentHtml + "</p></div>");
      @:      tabs.tabs("refresh");

                  @:  var chartconfig = {
      @:      type: '@ChartType',
      @:      data: {
      @:          labels: [],
      @:          datasets: []
      @:      },
      @:      options: {
      @:          responsive: true,
      @:          title: {
      @:              display: true,
      @:              text: '@ChartName'
      @:          },
      @:          tooltips: {
      @:              mode: 'index',
      @:              intersect: false,
      @:          },
      @:          hover: {
      @:              mode: 'nearest',
      @:              intersect: true
      @:          },
      @:          scales: {
      @:              xAxes: [{
      @:                  display: true,
      @:                  scaleLabel: {
      @:                      display: true,
      @:                      labelString: 'X'
      @:                  }
      @:              }],
      @:              yAxes: [{
      @:                  display: true,
      @:                  scaleLabel: {
      @:                      display: true,
      @:                      labelString: 'Y'
      @:                  }
      @:              }]
      @:          }
      @:      }
      @:  };

        //dynamic chart
                @:chartconfig.data.labels.push(@Xaxis);
                @:var elementID = 'canvas' + + @ind.ToString();
                @:var chartID = 'tabs-' + + @ind.ToString();
                @:$('<canvas>').attr({ id: elementID }).css({ width: '900px', height: '380px' }).appendTo('#' + chartID);
                @:var canvas = document.getElementById(elementID);
                @:var ctx = document.getElementById(elementID);


            for (var index = 0; index < Model.Loginname.Count(); index++) {
                var loginname = Model.Loginname.GetValue(index);
                var Yaxis = Model.Yaxis[ind][loginname.ToString()];
                @:var bordcolor = "rgba(" + (Math.random() * 255).toString() + ", " + (Math.random() * 255).toString() + ", " + (Math.random() * 255).toString() + ", " + "0.5)";
                @:var backgroundcolor = "rgba(" + (Math.random() * 255).toString() + ", " + (Math.random() * 255).toString() + ", " + (Math.random() * 255).toString() + ", " + "0.5)";
                @:var newDatasetn = { data: [], fill: false };
                @:newDatasetn.data.push(@Yaxis);
                @:newDatasetn.label = '@loginname';
                @:newDatasetn.borderColor = bordcolor;
                @:newDatasetn.backgroundColor = backgroundcolor;
                @:chartconfig.data.datasets.push(newDatasetn);
            }
            @:var numberChart = new Chart(ctx, chartconfig);
        }

        //default tab
        $('#charttabs').tabs({
            active: 0
        });

    });


        $(document).ready(function () {
        $('.ui-datepicker').each(function (i, v) {
            $(".ui - datepicker").val(" ");
            //$(v).val($.datepicker.formatDate('dd-M-yy', new Date($(v).val())))
            $(v).datepicker({
                dateFormat: 'yy-mm-dd',
                changeYear: true,
                changeMonth: true,
                yearRange: '2000:2025',
                buttonImage: '@Url.Content("~/Images/calendar.gif")',
                buttonImageOnly: true,
                showOn: "button"
            });
        });
    });


        $(function () {
        var reportdatecard = $("#reportdatecard");
            $("#analysislist").selectmenu({
            create: function (event, data) {
            $("#SelectedAnalysis").val(null);
        },

            change: function (event, data) {
                $("#SelectedAnalysis").val(data.item.value);
            }
        });
    });

     $(function () {
         var chartcard = $("#charttabs");
         var a = @Model.AnalysisResult.CompareTo(false);
         if (@Model.AnalysisResult.CompareTo(false)== 0) {
             chartcard.addClass("invisible");
         }
         else {
             chartcard.removeClass("invisible");
         }
        });
</script>
